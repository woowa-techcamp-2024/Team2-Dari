plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2' apply false
    id 'io.spring.dependency-management' version '1.1.6' apply false
    id 'org.asciidoctor.jvm.convert' version '3.3.2' apply false
    id 'jacoco'
}

allprojects {
    group = 'com.wootecam.festivals'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'jacoco'

    sourceCompatibility = '17'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        asciidoctorExt
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310' // Jackson의 Java 8 날짜/시간 모듈

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        testImplementation 'it.ozimov:embedded-redis:0.7.2'

        // session
        implementation 'org.springframework.session:spring-session-core'
        implementation 'org.springframework.session:spring-session-data-redis'

        // cache
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'com.github.ben-manes.caffeine:caffeine'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Rest docs
        asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

        // test
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.assertj:assertj-core:3.26.0'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'com.h2database:h2'

        // 모니터링 및 관리
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.hibernate:hibernate-micrometer:6.6.0.Final'
        runtimeOnly("io.micrometer:micrometer-registry-prometheus")

        // redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'com.github.codemonstur:embedded-redis:1.4.3'
    }

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }

    tasks.named('test') {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    tasks.named('asciidoctor') {
        inputs.dir snippetsDir
        configurations 'asciidoctorExt'

        sources {
            include("**/index.adoc")
        }

        baseDirFollowsSourceFile()
        dependsOn test
    }

    bootJar {
        dependsOn asciidoctor
        from("${asciidoctor.outputDir}") {
            into 'static/docs'
        }
    }

    jacoco {
        toolVersion = "0.8.8"
        reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
    }

    jacocoTestReport {
        dependsOn test
        reports {
            html.required = true
            xml.required = true
        }
        // exclude class, package from coverage report
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/QueueApplication.class',
                        '**/FestivalsApplication.class', // exclude main class
                        '**/global/audit/**', // exclude audit package
                        '**/dto/**', // exclude dto package
                        '**/global/exception/**', // exclude exception package
                        '**/global/api/**', // exclude api package
                        '**/global/config/**', // exclude config package
                ])
            }))
        }
    }

    jacocoTestCoverageVerification {
        // exclude class, package from coverage verification
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/QueueApplication.class',
                        '**/FestivalsApplication.class',  // exclude main class
                        '**/dto/**', // exclude dto package
                        '**/global/audit/**', // exclude audit package
                        '**/global/api/**', // exclude api package
                        '**/global/auth/**', // exclude auth package
                        '**/global/constants/**', // exclude constants package
                        '**/global/config/**', // exclude config package
                        '**/global/docs/**', // exclude docs package
                        '**/global/exception/**', // exclude exception package
                        '**/global/utils/**', // exclude utils package
                        '**/utils/**', // exclude utils package
                        '**/domain/purchase/exception/**',
                        '**/domain/purchase/repository/**',
                        '**/global/log/**', // exclude utils package
                        "**/service/TicketService.class'" // 테스트 버그로 인해 임시 제외
                ])
            }))
        }
        violationRules {
            rule {
                element = 'BUNDLE'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.7
                }
            }
        }
    }

    test {
        finalizedBy jacocoTestReport
        finalizedBy jacocoTestCoverageVerification
    }
}

project(':core') {
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

project(':api-server') {
    dependencies {
        implementation project(':core')
    }
}

project(':queue-server') {
    dependencies {
        implementation project(':core')
    }
}